;(function() {
  var undefined;

  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  var root = freeGlobal || freeSelf || Function('return this')();

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  var _ = root._ || {};

  /*----------------------------------------------------------------------------*/

  var templates = {
    'comment': {},
    'elasticCommentIDs': {},
    'elasticComments': {},
    'elasticSubreddit': {},
    'elasticThread': {},
    'search': {},
    'subredditInfo': {},
    'subredditPagination': {},
    'thread': {},
    'threadInfo': {}
  };

  templates['comment'] =   function(obj) {
    obj || (obj = {});
    var __t, __p = '', __j = Array.prototype.join;
    function print() { __p += __j.call(arguments, '') }
    with (obj) {

    var isRemoved = _.has(comment,"removed");
    var isDeleted = _.has(comment,"deleted");

    var commentCss = "comment comment-" + (isRemoved ? "removed" : (isDeleted ? "deleted" : (comment.depth % 2 == 0 ? "even" : "odd")));
    __p += '\n\n<div id="' +
    ((__t = ( id )) == null ? '' : __t) +
    '" class="' +
    ((__t = ( commentCss )) == null ? '' : __t) +
    '">\n	<div class="comment-head">\n		<a href="javascript:void(0)" class="author">[â€“]</a>\n		<a href="https://www.reddit.com/user/' +
    ((__t = ( comment.author )) == null ? '' : __t) +
    '" class="author comment-author">\n			' +
    ((__t = ( comment.author+(isDeleted ? " (deleted by user)" : "") )) == null ? '' : __t) +
    '\n		</a>\n		<span class="comment-score">' +
    ((__t = ( Format.prettyScore(comment.score) )) == null ? '' : __t) +
    ' point' +
    ((__t = ( ((comment.score == 1) ? "": "s") )) == null ? '' : __t) +
    '</span>\n		<span class="comment-time">' +
    ((__t = ( Format.prettyDate(comment.created_utc) )) == null ? '' : __t) +
    '</span>\n	</div>\n	<div class="comment-body">\n		' +
    ((__t = ( (comment.body === "[removed]" && isRemoved ? "<p>[likely removed by automoderator]</p>" : Format.parse(comment.body)) )) == null ? '' : __t) +
    '\n	</div>\n	<div class="comment-links">\n		<a href="/r/' +
    ((__t = ( Reddit.subreddit )) == null ? '' : __t) +
    '/comments/' +
    ((__t = ( Reddit.threadID )) == null ? '' : __t) +
    '/_/' +
    ((__t = ( id )) == null ? '' : __t) +
    '/">permalink</a>\n		<a href="https://www.reddit.com/r/' +
    ((__t = ( Reddit.subreddit )) == null ? '' : __t) +
    '/comments/' +
    ((__t = ( Reddit.threadID )) == null ? '' : __t) +
    '/_/' +
    ((__t = ( id )) == null ? '' : __t) +
    '/">reddit</a>\n	</div>\n</div>\n\n';

    }
    return __p
  };

  templates['elasticCommentIDs'] =   function(obj) {
    obj || (obj = {});
    var __t, __p = '';
    with (obj) {
    __p += '{\n	"query":{\n		"ids":{\n			"values":[' +
    ((__t = ( ids.join() )) == null ? '' : __t) +
    ']\n		}\n	},\n	"_source":[\n		"author","body","created_utc","parent_id","score"\n	]\n}';

    }
    return __p
  };

  templates['elasticComments'] =   function(obj) {
    obj || (obj = {});
    var __t, __p = '';
    with (obj) {
    __p += '{\n	"query":{\n		"term":{\n			"link_id":' +
    ((__t = ( id )) == null ? '' : __t) +
    '\n		}\n	},\n	"_source":[\n		"author","body","created_utc","parent_id","score"\n	],\n	"size":20\n}';

    }
    return __p
  };

  templates['elasticSubreddit'] =   function(obj) {
    obj || (obj = {});
    var __t, __p = '', __j = Array.prototype.join;
    function print() { __p += __j.call(arguments, '') }
    with (obj) {
    __p += '{\n	"query":{\n		"bool":{\n			"must":[\n				';
     if(_.toLower(subreddit) !== "all") {
    __p += '\n				{\n					"term":{\n						"subreddit":"' +
    ((__t = ( _.toLower(subreddit) )) == null ? '' : __t) +
    '"\n					}\n				},\n				';
     }
    __p += '\n				{\n					"range":{\n						"created_utc":{\n							"gt":' +
    ((__t = ( time )) == null ? '' : __t) +
    '\n						}\n					}\n				}\n			]\n		}\n	},\n	"_source":[\n		"author","url","subreddit","link_flair_text","score","title","created_utc","num_comments","domain","permalink","id","thumbnail","thumbnail_height","thumbnail_width"\n	],\n	"sort":[\n		{"score":"desc"}\n	],\n	"from":' +
    ((__t = ( (page-1)*postPerPage )) == null ? '' : __t) +
    ',\n	"size":' +
    ((__t = ( postPerPage )) == null ? '' : __t) +
    '\n}';

    }
    return __p
  };

  templates['elasticThread'] =   function(obj) {
    obj || (obj = {});
    var __t, __p = '';
    with (obj) {
    __p += '{\n	"query":{\n		"term":{\n			"id":"' +
    ((__t = ( id )) == null ? '' : __t) +
    '"\n		}\n	},\n	"_source":[\n		"author","created_utc","domain","link_flair_text","num_comments","url","subreddit","score","title","selftext","permalink","thumbnail","thumbnail_height","thumbnail_width"\n	],\n	"size":1\n}';

    }
    return __p
  };

  templates['search'] =   function(obj) {
    obj || (obj = {});
    var __t, __p = '';
    with (obj) {
    __p += '\n	var radioInput = function(name, displayNames, values) {\n		var inputs = "";\n		\n		for(var i = 0, len = displayNames.length; i < len; i++){\n			inputs += \'<span class="radioButton"\'+ (Vars.lookup[name] === values[i] ? \' style="background: #239f2b; color:#fff"\':\'\')+\'>\';\n			inputs += \'<input type="radio" id="\'+name+i+\'" name="\'+name+\'" onchange="CSS.radio(this)"\';\n			inputs += \'value="\'+values[i]+\'" \'+(Vars.lookup[name] === values[i] ? \' checked "\':\'\')+\' >\';\n			inputs += \'<label for="\'+name+i+\'">\'+displayNames[i]+\'</label></span>\';\n		}\n		return inputs;\n	};\n\n	var textInput = function(name){\n		return \'<input type="text" name="\'+name+\'" id="\'+name+\'" value="\'+Vars.get(name)+\'">\'; \n	};\n\n	var label = function(name, display) {\n		return \'<label for="\'+name+\'">\'+display+\': </label>\';\n	};\n\n	var inputRow = function(text, input) {\n		return \'<div class="search-row"><span class="search-left">\'+text+\'</span><span>\'+input+"</span></div>";\n	};\n\n	var selectTime = function() {\n		var values = ["hour", "12hour", "day", "week", "month", "6month", "year", "all"];\n		var display = ["past hour", "past 12 hours", "past day", "past week", "past month", "past 6 months", "past year", "all time"];\n		var html = \'<select name="time" id="time">\';\n\n		for(var i = 0, len = values.length; i < len; i++) {\n			html += \'<option value="\'+values[i]+\'"\' + ((Vars.get("time") === values[i]) ? " selected" : \'\')+\'>\'+display[i]+\'</option>\';\n		}\n\n		return html + "</select>";\n	};\n\n	var select = function(name, display, values){\n		var html = \'<select name="\'+name+\'" id="\'+name+\'">\';\n		\n		for(var i = 0, len = values.length; i < len; i++) {\n			html += \'<option value="\'+values[i]+\'"\' + ((Vars.get(name) === values[i]) ? " selected" : \'\')+\'>\'+display[i]+\'</option>\';\n		}\n\n		return html + "</select>";\n	};\n\nreturn {\n	createSearch: function(){\n		var searchBox = document.createElement("div");\n		searchBox.id = "main-box";\n		searchBox.className = "search-box";\n	/*\n		Comments:\n		text			(body)		string\n		title 		(title)		string\n		subreddit		(subreddit)	string\n		author		(author)		string\n		over_18		(over_18)		sfw,nsfw,both *\n		locked		(locked)		bool *\n		between		(after/before)	"date"\n		sort 		(sort)		asc,desc\n	*/\n		var html = inputRow(\'Im looking for: \', radioInput("thread", ["Thread","Comment"], ["true", "false"]));		\n		html += inputRow(label("text", "Text"), textInput("text"));\n		html += inputRow(label("title","Title"), textInput("title"));\n		html += inputRow(label("subreddit", "Subreddit"), textInput("subreddit"));\n		html += inputRow(label("author", "Author"), textInput("author"));\n		html += inputRow("Over 18: ", radioInput("over_18", ["Both","NSFW","SFW"], ["both","nsfw","sfw"]));\n		html += inputRow("Locked: ", radioInput("locked", ["Both","True", "False"], ["both","true","false"]));\n		html += inputRow("Removed: ", select("removed", ["Removed and non-removed", "Only removed", "Only deleted"], ["all", "removed", "deleted"]));\n		html += inputRow("From:", selectTime());\n		html += inputRow("Sort: ", select("sort", ["Highest score","Lowest score","Newest","Oldest"], ["score_desc","score_asc","time_desc","time_asc"]));\n		html += \'<input type="button" value="\'+(showAdvanced?\'Hide\':\'Show\')+\' advanced">\';\n		html += \'<input type="submit" value="Search">\';\n		searchBox.innerHTML = html;\n	\n		mainDiv.appendChild(searchBox);';

    }
    return __p
  };

  templates['subredditInfo'] =   function(obj) {
    obj || (obj = {});
    var __t, __p = '', __j = Array.prototype.join;
    function print() { __p += __j.call(arguments, '') }
    with (obj) {
    __p += '<div class="subreddit-info">\n	top post of <a href="https://www.reddit.com/r/' +
    ((__t = ( subreddit )) == null ? '' : __t) +
    '">/r/' +
    ((__t = ( subreddit )) == null ? '' : __t) +
    '</a> from:\n	<select onchange="Vars.reload(this)">\n		<option value="hour"';
     if(time === "hour"){
    __p += ' selected';
     }
    __p += '>past hour</option>\n		<option value="12hour"';
     if(time === "12hour"){
    __p += ' selected';
     }
    __p += '>past 12 hours</option>\n		<option value="day"';
     if(time === "day"){
    __p += ' selected';
     }
    __p += '>past day</option>\n		<option value="week"';
     if(time === "week"){
    __p += ' selected';
     }
    __p += '>past week</option>\n		<option value="month"';
     if(time === "month"){
    __p += ' selected';
     }
    __p += '>past month</option>\n		<option value="6month"';
     if(time === "6month"){
    __p += ' selected';
     }
    __p += '>past 6 months</option>\n		<option value="year"';
     if(time === "year"){
    __p += ' selected';
     }
    __p += '>past year</option>\n		<option value="all"';
     if(time === "all"){
    __p += ' selected';
     }
    __p += '>all time</option>		\n	</select>				\n</div>';

    }
    return __p
  };

  templates['subredditPagination'] =   function(obj) {
    obj || (obj = {});
    var __t, __p = '', __j = Array.prototype.join;
    function print() { __p += __j.call(arguments, '') }
    with (obj) {
    __p += '<div id="pagination">\n	Page: \n	';
     if(start > 1) {
    __p += '\n		<a href="' +
    ((__t = ( urlBase+1 )) == null ? '' : __t) +
    '">1</a> ... \n	';
     }

    	for(var i = start; i <= end; i++) {	
    		if(currentPage === i) {
    __p += '\n			<span>' +
    ((__t = ( i )) == null ? '' : __t) +
    '</span>\n	';
    	} else {
    __p += '\n			<a href="' +
    ((__t = ( urlBase+i )) == null ? '' : __t) +
    '">' +
    ((__t = ( i )) == null ? '' : __t) +
    '</a>\n	';
    	}
    	}
    __p += '\n</div>';

    }
    return __p
  };

  templates['thread'] =   function(obj) {
    obj || (obj = {});
    var __t, __p = '', __j = Array.prototype.join;
    function print() { __p += __j.call(arguments, '') }
    with (obj) {
    __p += '<div class="thread">\n';
    	if(typeof postNr !== "undefined") {
    __p += '\n	<span class="post-rank">' +
    ((__t = ( postNr )) == null ? '' : __t) +
    '</span>\n';
    	}
    __p += '\n	<div class="thread-score-box">\n		<div class="vote upvote"></div>\n		<div class="thread-score">' +
    ((__t = ( Format.prettyScore(thread.score) )) == null ? '' : __t) +
    '</div>\n		<div class="vote downvote"></div>\n	</div>\n';
     	var url = _.replace(thread.url, "https://www.reddit.com", "https://www.removeddit.com");

    	if(_.includes(["self", "default", "image", "nsfw"], thread.thumbnail)) {
    __p += '\n		<a href="' +
    ((__t = ( url )) == null ? '' : __t) +
    '" class="thumbnail thumbnail-' +
    ((__t = ( thread.thumbnail)) == null ? '' : __t) +
    '"></a>\n';
    	} else {
    		var thumbnailWidth = _.defaultTo(thread.thumbnail_width, 140) * 0.5;
    		var thumbnailHeight = _.defaultTo(thread.thumbnail_height, 140) * 0.5;
    	;
    __p += '	<a href="' +
    ((__t = ( url )) == null ? '' : __t) +
    '">\n			<img class="thumbnail" src="' +
    ((__t = ( thread.thumbnail )) == null ? '' : __t) +
    '" width="' +
    ((__t = ( thumbnailWidth )) == null ? '' : __t) +
    '" height="' +
    ((__t = ( thumbnailHeight )) == null ? '' : __t) +
    '">\n		</a>\n';
    	}
    __p += '\n	<div class="thread-content">\n\n		<a class="thread-title" href="' +
    ((__t = ( url )) == null ? '' : __t) +
    '">' +
    ((__t = ( thread.title )) == null ? '' : __t) +
    '</a>\n';
    	if(!_.isNil(thread.link_flair_text)){
    __p += '\n		<span class="link-flair">' +
    ((__t = ( thread.link_flair_text )) == null ? '' : __t) +
    '</span>\n';
    	}
    __p += '	\n		<span class="domain">(' +
    ((__t = ( thread.domain )) == null ? '' : __t) +
    ')</span>\n		<div class="thread-info">\n			submitted <span class="thread-time">' +
    ((__t = ( Format.prettyDate(thread.created_utc) )) == null ? '' : __t) +
    '</span> by\n			<a class="thread-author author" href="https://www.reddit.com/user/' +
    ((__t = ( thread.author )) == null ? '' : __t) +
    '">' +
    ((__t = ( thread.author )) == null ? '' : __t) +
    '</a>\n		';
    	if(Reddit.isAll){
    __p += '\n			to <a class="subreddit-link author" href="/r/' +
    ((__t = ( thread.subreddit )) == null ? '' : __t) +
    '">/r/' +
    ((__t = ( thread.subreddit )) == null ? '' : __t) +
    '</a>\n		';
    	}
    __p += '		\n		</div>\n		<div class="total-comments">\n			<a class="grey-link" href="' +
    ((__t = ( thread.permalink )) == null ? '' : __t) +
    '">\n				<b>' +
    ((__t = ( thread.num_comments )) == null ? '' : __t) +
    ' comments</b>\n			</a>\n			<a class="grey-link" href="https://www.reddit.com' +
    ((__t = ( thread.permalink )) == null ? '' : __t) +
    '">\n				<b>reddit</b>\n			</a>\n		</div>\n	</div>\n</div>';

    }
    return __p
  };

  templates['threadInfo'] =   function(obj) {
    obj || (obj = {});
    var __t, __p = '';
    with (obj) {
    __p += '<div id="comment-info">\n	removed comments: ' +
    ((__t = ( removedComments )) == null ? '' : __t) +
    '/' +
    ((__t = ( totalComments )) == null ? '' : __t) +
    ' (' +
    ((__t = ( (100 * removedComments / totalComments).toFixed(1) )) == null ? '' : __t) +
    '%)\n</div>\n<div id="comment-sort">sorted by: top</div>';

    }
    return __p
  };

  /*----------------------------------------------------------------------------*/

  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    define(['lodash'], function(lodash) {
      _ = lodash;
      lodash.templates = lodash.extend(lodash.templates || {}, templates);
    });
  }
  else if (freeModule) {
    _ = require('lodash');
    (freeModule.exports = templates).templates = templates;
    freeExports.templates = templates;
  }
  else if (_) {
    _.templates = _.extend(_.templates || {}, templates);
  }
}.call(this));
